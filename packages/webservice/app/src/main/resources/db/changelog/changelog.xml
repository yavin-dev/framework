<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog" xmlns:ext="http://www.liquibase.org/xml/ns/dbchangelog-ext" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.4.xsd">
    <changeSet author="admin" id="1">
        <sql>
          CREATE TABLE AsyncQuery (
              id varchar(36) NOT NULL,
              asyncAfterSeconds int,
              requestId varchar(36),
              principalName varchar(255),
              query varchar(20480) NOT NULL,
              queryType int NOT NULL,
              status varchar(20) NOT NULL,
              createdOn timestamp NOT NULL,
              updatedOn timestamp NOT NULL,
              completedOn timestamp,
              contentLength integer,
              responseBody MEDIUMTEXT,
              resultType varchar(15),
              httpStatus integer,
              resultFormatType varchar(15),
              recordCount integer,
              PRIMARY KEY (id)
          );

          CREATE TABLE User (
              id varchar(255) not null,
              createdOn timestamp default current_timestamp,
              updatedOn timestamp default current_timestamp,
              PRIMARY KEY (id)
          );

          CREATE TABLE Asset (
              asset_type varchar(31) not null,
              id integer AUTO_INCREMENT,
              createdOn timestamp default current_timestamp,
              title varchar(255),
              updatedOn timestamp default current_timestamp,
              owner varchar(255),
              PRIMARY KEY (id),
              FOREIGN KEY (owner) references User(id)
          );

          CREATE TABLE Report (
              id integer not null,
              request MEDIUMTEXT,
              visualization MEDIUMTEXT,
              PRIMARY KEY (id),
              FOREIGN KEY (id) references Asset(id)
          );

          CREATE TABLE Dashboard (
              id integer not null,
              filters MEDIUMTEXT,
              presentation MEDIUMTEXT,
              PRIMARY KEY (id),
              FOREIGN KEY (id) references Asset(id)
          );

          CREATE TABLE DashboardWidget (
              id integer AUTO_INCREMENT,
              createdOn timestamp default current_timestamp,
              title varchar(255),
              updatedOn timestamp default current_timestamp,
              dashboard integer,
              requests MEDIUMTEXT,
              visualization MEDIUMTEXT,
              PRIMARY KEY (id),
              FOREIGN KEY (dashboard) references Dashboard(id)
          );

          CREATE TABLE map_editor_to_dashboard_collections (
              user_id varchar(255) not null,
              dashboard_collection_id integer not null,
              PRIMARY KEY (user_id, dashboard_collection_id),
              FOREIGN KEY (dashboard_collection_id) references Dashboard(id),
              FOREIGN KEY (user_id) references User(id)
          );

          CREATE TABLE map_user_to_fav_dashboards (
             user_id varchar(255) not null,
             dashboard_id integer not null,
             PRIMARY KEY (user_id, dashboard_id),
             FOREIGN KEY (dashboard_id) references Dashboard(id),
             FOREIGN KEY (user_id) references User(id)
         );

          CREATE TABLE map_user_to_fav_reports (
             user_id varchar(255) not null,
             report_id integer not null,
             PRIMARY KEY (user_id, report_id),
             FOREIGN KEY (report_id) references Report(id),
             FOREIGN KEY (user_id) references User(id)
          );

          CREATE TABLE Role (
             id varchar(255) not null,
             createdOn timestamp default current_timestamp,
             updatedOn timestamp default current_timestamp,
             PRIMARY KEY (id)
          );

          CREATE TABLE User_Roles (
             user_id varchar(255) not null,
             roles_id varchar(255) not null,
             PRIMARY KEY (user_id, roles_id),
             FOREIGN KEY (roles_id) references Role(id),
             FOREIGN KEY (user_id) references User(id)
          );
        </sql>
    </changeSet>
    <changeSet author="admin" id="2">
        <sql>
          ALTER TABLE AsyncQuery
          ADD FOREIGN KEY (principalName) references User(id);

          CREATE TABLE TableExport (
            id varchar(36) not null,
            createdOn timestamp,
            principalName varchar(255),
            query varchar(255),
            queryType integer,
            requestId varchar(36),
            resultType varchar(255),
            status varchar(255),
            updatedOn timestamp,
            completedOn timestamp,
            httpStatus integer,
            recordCount integer,
            message TEXT,
            url varchar(255),
            primary key (id),
            FOREIGN KEY (principalName) references User(id)
          );
        </sql>
    </changeSet>
    <changeSet author="admin" id="3">
        <sql>
            CREATE TABLE DeliveryRule (
            id integer AUTO_INCREMENT,
            createdOn timestamp,
            updatedOn timestamp,
            lastDeliveredOn timestamp,
            owner varchar(255),
            deliveredItem_id int,
            format MEDIUMTEXT not null,
            frequency int not null,
            recipients TEXT,
            scheduling_rules MEDIUMTEXT,
            version varchar(36),
            PRIMARY KEY (id),
            FOREIGN KEY (deliveredItem_id) references Asset(id),
            FOREIGN KEY (owner) references User(id)
            );
        </sql>
    </changeSet>
    <changeSet author="admin" id="4">
        <sql>
            ALTER TABLE DeliveryRule
                ADD delivery int not null default 0;
            ALTER TABLE DeliveryRule
                ADD isDisabled boolean not null default false;
        </sql>
    </changeSet>
</databaseChangeLog>

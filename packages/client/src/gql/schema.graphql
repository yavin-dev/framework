"""
Direct the client to resolve this field locally, either from the cache or local resolvers.
"""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """The variable name to export this field as."""
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """Specify the store key."""
  key: String!

  """
  An array of query argument names to include in the generated custom store key.
  """
  filter: [String!]
) on FIELD

type Asset {
  id: DeferredID
  createdOn: Date
  title: String
  updatedOn: Date
  owner(data: UsersInput): UsersConnection
}

type AssetConnection {
  edges: [AssetEdge]
  pageInfo: PageInfo
}

type AssetEdge {
  node: Asset
}

input AssetInput {
  id: ID
  createdOn: Date
  title: String
  updatedOn: Date
  owner: UsersInput
}

enum ColumnarType {
  dimension
  timeDimension
  metric
  computed
}

type DashboardWidgets {
  id: DeferredID
  createdOn: Date
  requests: [request]
  title: String
  updatedOn: Date
  visualization: dashboardWidgetVisualization
  dashboard(data: DashboardsInput): DashboardsConnection
  owner(data: UsersInput): UsersConnection
}

type DashboardWidgetsConnection {
  edges: [DashboardWidgetsEdge]
  pageInfo: PageInfo
}

type DashboardWidgetsEdge {
  node: DashboardWidgets
}

input DashboardWidgetsInput {
  id: ID
  createdOn: Date
  requests: [requestInput]
  title: String
  updatedOn: Date
  visualization: dashboardWidgetVisualizationInput
  dashboard: DashboardsInput
  owner: UsersInput
}

type Dashboards {
  id: DeferredID
  createdOn: Date
  filters: [dashboardFilter]
  presentation: dashboardPresentation
  title: String
  updatedOn: Date
  deliveryRules(filter: String, sort: String, after: String, first: String, ids: [String], data: [DeliveryRulesInput]): DeliveryRulesConnection
  editors(filter: String, sort: String, after: String, first: String, ids: [String], data: [UsersInput]): UsersConnection
  owner(data: UsersInput): UsersConnection
  widgets(filter: String, sort: String, after: String, first: String, ids: [String], data: [DashboardWidgetsInput]): DashboardWidgetsConnection
}

type DashboardsConnection {
  edges: [DashboardsEdge]
  pageInfo: PageInfo
}

type DashboardsEdge {
  node: Dashboards
}

input DashboardsInput {
  id: ID
  createdOn: Date
  filters: [dashboardFilterInput]
  presentation: dashboardPresentationInput
  title: String
  updatedOn: Date
  deliveryRules: [DeliveryRulesInput]
  editors: [UsersInput]
  owner: UsersInput
  widgets: [DashboardWidgetsInput]
}

"""Date"""
scalar Date

"""custom id type"""
scalar DeferredID

enum DeliveryFrequency {
  minute
  hour
  day
  week
  month
  quarter
}

type DeliveryRules {
  id: DeferredID
  createdOn: Date
  dataSources: [String]
  deliveryType: String
  format: deliveryFormat
  frequency: DeliveryFrequency
  lastDeliveredOn: Date
  recipients: [String]
  schedulingRules: schedulingRules
  updatedOn: Date
  version: String
  deliveredItem(data: AssetInput): AssetConnection
  owner(data: UsersInput): UsersConnection
}

type DeliveryRulesConnection {
  edges: [DeliveryRulesEdge]
  pageInfo: PageInfo
}

type DeliveryRulesEdge {
  node: DeliveryRules
}

input DeliveryRulesInput {
  id: ID
  createdOn: Date
  dataSources: [String]
  deliveryType: String
  format: deliveryFormatInput
  frequency: DeliveryFrequency
  lastDeliveredOn: Date
  recipients: [String]
  schedulingRules: schedulingRulesInput
  updatedOn: Date
  version: String
  deliveredItem: AssetInput
  owner: UsersInput
}

enum DeliveryType {
  csv
  pdf
  png
  gsheet
  anomaly
}

type ElideArgument {
  id: DeferredID
  defaultValue: String
  description: String
  name: String
  type: ElideValueType
  values: [String]
  valueSourceType: ElideValueSourceType
  tableSource(data: ElideTableSourceInput): ElideTableSourceConnection
}

type ElideArgumentConnection {
  edges: [ElideArgumentEdge]
  pageInfo: PageInfo
}

type ElideArgumentEdge {
  node: ElideArgument
}

input ElideArgumentInput {
  id: ID
  defaultValue: String
  description: String
  name: String
  type: ElideValueType
  values: [String]
  valueSourceType: ElideValueSourceType
  tableSource: ElideTableSourceInput
}

type ElideAsyncQuery {
  id: DeferredID
  asyncAfterSeconds: Int
  createdOn: Date
  principalName: String
  query: String
  queryType: ElideQueryType
  result: elideAsyncQueryResult
  status: ElideQueryStatus
  updatedOn: Date
}

type ElideAsyncQueryConnection {
  edges: [ElideAsyncQueryEdge]
  pageInfo: PageInfo
}

type ElideAsyncQueryEdge {
  node: ElideAsyncQuery
}

input ElideAsyncQueryInput {
  id: ID
  asyncAfterSeconds: Int
  createdOn: Date
  principalName: String
  query: String
  queryType: ElideQueryType
  result: elideAsyncQueryResultInput
  status: ElideQueryStatus
  updatedOn: Date
}

enum ElideCardinalitySize {
  TINY
  SMALL
  MEDIUM
  LARGE
  HUGE
  UNKNOWN
}

type ElideColumn {
  id: DeferredID
  cardinality: ElideCardinalitySize
  category: String
  columnType: ElideColumnType
  description: String
  expression: String
  friendlyName: String
  hidden: Boolean
  name: String
  requiredFilter: String
  tags: [String]
  values: [String]
  valueSourceType: ElideValueSourceType
  valueType: ElideValueType
  arguments(filter: String, sort: String, after: String, first: String, ids: [String], data: [ElideArgumentInput]): ElideArgumentConnection
  table(data: ElideTableInput): ElideTableConnection
  tableSource(data: ElideTableSourceInput): ElideTableSourceConnection
}

type ElideColumnConnection {
  edges: [ElideColumnEdge]
  pageInfo: PageInfo
}

type ElideColumnEdge {
  node: ElideColumn
}

input ElideColumnInput {
  id: ID
  cardinality: ElideCardinalitySize
  category: String
  columnType: ElideColumnType
  description: String
  expression: String
  friendlyName: String
  hidden: Boolean
  name: String
  requiredFilter: String
  tags: [String]
  values: [String]
  valueSourceType: ElideValueSourceType
  valueType: ElideValueType
  arguments: [ElideArgumentInput]
  table: ElideTableInput
  tableSource: ElideTableSourceInput
}

enum ElideColumnType {
  FIELD
  FORMULA
}

type ElideDimension {
  id: DeferredID
  cardinality: ElideCardinalitySize
  category: String
  columnType: ElideColumnType
  description: String
  expression: String
  friendlyName: String
  hidden: Boolean
  name: String
  requiredFilter: String
  tags: [String]
  values: [String]
  valueSourceType: ElideValueSourceType
  valueType: ElideValueType
  arguments(filter: String, sort: String, after: String, first: String, ids: [String], data: [ElideArgumentInput]): ElideArgumentConnection
  table(data: ElideTableInput): ElideTableConnection
  tableSource(data: ElideTableSourceInput): ElideTableSourceConnection
}

type ElideDimensionConnection {
  edges: [ElideDimensionEdge]
  pageInfo: PageInfo
}

type ElideDimensionEdge {
  node: ElideDimension
}

input ElideDimensionInput {
  id: ID
  cardinality: ElideCardinalitySize
  category: String
  columnType: ElideColumnType
  description: String
  expression: String
  friendlyName: String
  hidden: Boolean
  name: String
  requiredFilter: String
  tags: [String]
  values: [String]
  valueSourceType: ElideValueSourceType
  valueType: ElideValueType
  arguments: [ElideArgumentInput]
  table: ElideTableInput
  tableSource: ElideTableSourceInput
}

type ElideMetric {
  id: DeferredID
  cardinality: ElideCardinalitySize
  category: String
  columnType: ElideColumnType
  description: String
  expression: String
  friendlyName: String
  hidden: Boolean
  name: String
  requiredFilter: String
  tags: [String]
  values: [String]
  valueSourceType: ElideValueSourceType
  valueType: ElideValueType
  arguments(filter: String, sort: String, after: String, first: String, ids: [String], data: [ElideArgumentInput]): ElideArgumentConnection
  table(data: ElideTableInput): ElideTableConnection
  tableSource(data: ElideTableSourceInput): ElideTableSourceConnection
}

type ElideMetricConnection {
  edges: [ElideMetricEdge]
  pageInfo: PageInfo
}

type ElideMetricEdge {
  node: ElideMetric
}

input ElideMetricInput {
  id: ID
  cardinality: ElideCardinalitySize
  category: String
  columnType: ElideColumnType
  description: String
  expression: String
  friendlyName: String
  hidden: Boolean
  name: String
  requiredFilter: String
  tags: [String]
  values: [String]
  valueSourceType: ElideValueSourceType
  valueType: ElideValueType
  arguments: [ElideArgumentInput]
  table: ElideTableInput
  tableSource: ElideTableSourceInput
}

type ElideNamespace {
  id: DeferredID
  description: String
  friendlyName: String
  name: String
  tables(filter: String, sort: String, after: String, first: String, ids: [String], data: [ElideTableInput]): ElideTableConnection
}

type ElideNamespaceConnection {
  edges: [ElideNamespaceEdge]
  pageInfo: PageInfo
}

type ElideNamespaceEdge {
  node: ElideNamespace
}

input ElideNamespaceInput {
  id: ID
  description: String
  friendlyName: String
  name: String
  tables: [ElideTableInput]
}

enum ElideQueryStatus {
  COMPLETE
  QUEUED
  PROCESSING
  CANCELLED
  TIMEDOUT
  FAILURE
  CANCEL_COMPLETE
}

enum ElideQueryType {
  GRAPHQL_V1_0
  JSONAPI_V1_0
}

enum ElideRelationshipOp {
  FETCH
  DELETE
  UPSERT
  REPLACE
  REMOVE
  UPDATE
}

enum ElideResultType {
  JSON
  CSV
}

type ElideTable {
  id: DeferredID
  cardinality: ElideCardinalitySize
  category: String
  description: String
  friendlyName: String
  hidden: Boolean
  isFact: Boolean
  name: String
  requiredFilter: String
  tags: [String]
  arguments(filter: String, sort: String, after: String, first: String, ids: [String], data: [ElideArgumentInput]): ElideArgumentConnection
  columns: ElideColumnConnection
  dimensions: ElideDimensionConnection
  metrics: ElideMetricConnection
  namespace: ElideNamespaceConnection
  timeDimensions(filter: String, sort: String, after: String, first: String, ids: [String], data: [ElideTimeDimensionInput]): ElideTimeDimensionConnection
}

type ElideTableConnection {
  edges: [ElideTableEdge]
  pageInfo: PageInfo
}

type ElideTableEdge {
  node: ElideTable
}

type ElideTableExport {
  id: DeferredID
  asyncAfterSeconds: Int
  createdOn: Date
  principalName: String
  query: String
  queryType: ElideQueryType
  result: elideTableExportResult
  resultType: ElideResultType
  status: ElideQueryStatus
  updatedOn: Date
}

type ElideTableExportConnection {
  edges: [ElideTableExportEdge]
  pageInfo: PageInfo
}

type ElideTableExportEdge {
  node: ElideTableExport
}

input ElideTableExportInput {
  id: ID
  asyncAfterSeconds: Int
  createdOn: Date
  principalName: String
  query: String
  queryType: ElideQueryType
  result: elideTableExportResultInput
  resultType: ElideResultType
  status: ElideQueryStatus
  updatedOn: Date
}

input ElideTableInput {
  id: ID
  cardinality: ElideCardinalitySize
  category: String
  description: String
  friendlyName: String
  hidden: Boolean
  isFact: Boolean
  name: String
  requiredFilter: String
  tags: [String]
  arguments: [ElideArgumentInput]
  columns: [ElideColumnInput]
  dimensions: [ElideDimensionInput]
  metrics: [ElideMetricInput]
  namespace: ElideNamespaceInput
  timeDimensions: [ElideTimeDimensionInput]
}

type ElideTableSource {
  id: DeferredID
  suggestionColumns(filter: String, sort: String, after: String, first: String, ids: [String], data: [ElideColumnInput]): ElideColumnConnection
  valueSource(data: ElideColumnInput): ElideColumnConnection
}

type ElideTableSourceConnection {
  edges: [ElideTableSourceEdge]
  pageInfo: PageInfo
}

type ElideTableSourceEdge {
  node: ElideTableSource
}

input ElideTableSourceInput {
  id: ID
  suggestionColumns: [ElideColumnInput]
  valueSource: ElideColumnInput
}

type ElideTimeDimension {
  id: DeferredID
  cardinality: ElideCardinalitySize
  category: String
  columnType: ElideColumnType
  description: String
  expression: String
  friendlyName: String
  hidden: Boolean
  name: String
  requiredFilter: String
  tags: [String]
  timezone: TimeZone
  values: [String]
  valueSourceType: ElideValueSourceType
  valueType: ElideValueType
  arguments(filter: String, sort: String, after: String, first: String, ids: [String], data: [ElideArgumentInput]): ElideArgumentConnection
  supportedGrains(filter: String, sort: String, after: String, first: String, ids: [String], data: [ElideTimeDimensionGrainInput]): ElideTimeDimensionGrainConnection
  table(data: ElideTableInput): ElideTableConnection
  tableSource(data: ElideTableSourceInput): ElideTableSourceConnection
}

type ElideTimeDimensionConnection {
  edges: [ElideTimeDimensionEdge]
  pageInfo: PageInfo
}

type ElideTimeDimensionEdge {
  node: ElideTimeDimension
}

type ElideTimeDimensionGrain {
  id: DeferredID
  expression: String
  format: String
  grain: ElideTimeGrain
}

type ElideTimeDimensionGrainConnection {
  edges: [ElideTimeDimensionGrainEdge]
  pageInfo: PageInfo
}

type ElideTimeDimensionGrainEdge {
  node: ElideTimeDimensionGrain
}

input ElideTimeDimensionGrainInput {
  id: ID
  expression: String
  format: String
  grain: ElideTimeGrain
}

input ElideTimeDimensionInput {
  id: ID
  cardinality: ElideCardinalitySize
  category: String
  columnType: ElideColumnType
  description: String
  expression: String
  friendlyName: String
  hidden: Boolean
  name: String
  requiredFilter: String
  tags: [String]
  timezone: TimeZone
  values: [String]
  valueSourceType: ElideValueSourceType
  valueType: ElideValueType
  arguments: [ElideArgumentInput]
  supportedGrains: [ElideTimeDimensionGrainInput]
  table: ElideTableInput
  tableSource: ElideTableSourceInput
}

enum ElideTimeGrain {
  SECOND
  MINUTE
  HOUR
  DAY
  ISOWEEK
  WEEK
  MONTH
  QUARTER
  YEAR
}

enum ElideValueSourceType {
  ENUM
  TABLE
  NONE
}

enum ElideValueType {
  TIME
  INTEGER
  DECIMAL
  MONEY
  TEXT
  COORDINATE
  BOOLEAN
  ID
  UNKNOWN
}

type Mutation {
  roles(op: ElideRelationshipOp = FETCH, ids: [String], filter: String, sort: String, first: String, after: String, data: [RolesInput]): RolesConnection
  namespace(op: ElideRelationshipOp = FETCH, ids: [String], filter: String, sort: String, first: String, after: String, data: [ElideNamespaceInput]): ElideNamespaceConnection
  users(op: ElideRelationshipOp = FETCH, ids: [String], filter: String, sort: String, first: String, after: String, data: [UsersInput]): UsersConnection
  table(op: ElideRelationshipOp = FETCH, ids: [String], filter: String, sort: String, first: String, after: String, data: [ElideTableInput]): ElideTableConnection
  deliveryRules(op: ElideRelationshipOp = FETCH, ids: [String], filter: String, sort: String, first: String, after: String, data: [DeliveryRulesInput]): DeliveryRulesConnection
  reports(op: ElideRelationshipOp = FETCH, ids: [String], filter: String, sort: String, first: String, after: String, data: [ReportsInput]): ReportsConnection
  tableExport(op: ElideRelationshipOp = FETCH, ids: [String], filter: String, sort: String, first: String, after: String, data: [ElideTableExportInput]): ElideTableExportConnection
  asset(op: ElideRelationshipOp = FETCH, ids: [String], filter: String, sort: String, first: String, after: String, data: [AssetInput]): AssetConnection
  asyncQuery(op: ElideRelationshipOp = FETCH, ids: [String], filter: String, sort: String, first: String, after: String, data: [ElideAsyncQueryInput]): ElideAsyncQueryConnection
  dashboards(op: ElideRelationshipOp = FETCH, ids: [String], filter: String, sort: String, first: String, after: String, data: [DashboardsInput]): DashboardsConnection
}

type ObjectObjectMap {
  key: String
  value: String
}

input ObjectObjectMapInput {
  key: String
  value: String
}

type PageInfo {
  hasNextPage: Boolean
  startCursor: String
  endCursor: String
  totalRecords: Int
}

type Query {
  roles(op: ElideRelationshipOp = FETCH, ids: [String], filter: String, sort: String, first: String, after: String, data: [RolesInput]): RolesConnection
  namespace(op: ElideRelationshipOp = FETCH, ids: [String], filter: String, sort: String, first: String, after: String, data: [ElideNamespaceInput]): ElideNamespaceConnection
  users(op: ElideRelationshipOp = FETCH, ids: [String], filter: String, sort: String, first: String, after: String, data: [UsersInput]): UsersConnection
  table(op: ElideRelationshipOp = FETCH, ids: [String], filter: String, sort: String, first: String, after: String, data: [ElideTableInput]): ElideTableConnection
  deliveryRules(op: ElideRelationshipOp = FETCH, ids: [String], filter: String, sort: String, first: String, after: String, data: [DeliveryRulesInput]): DeliveryRulesConnection
  reports(op: ElideRelationshipOp = FETCH, ids: [String], filter: String, sort: String, first: String, after: String, data: [ReportsInput]): ReportsConnection
  tableExport(op: ElideRelationshipOp = FETCH, ids: [String], filter: String, sort: String, first: String, after: String, data: [ElideTableExportInput]): ElideTableExportConnection
  asset(op: ElideRelationshipOp = FETCH, ids: [String], filter: String, sort: String, first: String, after: String, data: [AssetInput]): AssetConnection
  asyncQuery(op: ElideRelationshipOp = FETCH, ids: [String], filter: String, sort: String, first: String, after: String, data: [ElideAsyncQueryInput]): ElideAsyncQueryConnection
  dashboards(op: ElideRelationshipOp = FETCH, ids: [String], filter: String, sort: String, first: String, after: String, data: [DashboardsInput]): DashboardsConnection
}

type Reports {
  id: DeferredID
  createdOn: Date
  request: request
  title: String
  updatedOn: Date
  visualization: visualization
  deliveryRules(filter: String, sort: String, after: String, first: String, ids: [String], data: [DeliveryRulesInput]): DeliveryRulesConnection
  owner(data: UsersInput): UsersConnection
}

type ReportsConnection {
  edges: [ReportsEdge]
  pageInfo: PageInfo
}

type ReportsEdge {
  node: Reports
}

input ReportsInput {
  id: ID
  createdOn: Date
  request: requestInput
  title: String
  updatedOn: Date
  visualization: visualizationInput
  deliveryRules: [DeliveryRulesInput]
  owner: UsersInput
}

type Roles {
  id: DeferredID
  createdOn: Date
  updatedOn: Date
}

type RolesConnection {
  edges: [RolesEdge]
  pageInfo: PageInfo
}

type RolesEdge {
  node: Roles
}

input RolesInput {
  id: ID
  createdOn: Date
  updatedOn: Date
}

type StringStringMap {
  key: String
  value: String
}

input StringStringMapInput {
  key: String
  value: String
}

"""Custom Elide type"""
scalar Time

"""TimeZone"""
scalar TimeZone

"""URL"""
scalar URL

type Users {
  id: DeferredID
  createdOn: Date
  updatedOn: Date
  dashboards(filter: String, sort: String, after: String, first: String, ids: [String], data: [DashboardsInput]): DashboardsConnection
  editingDashboards(filter: String, sort: String, after: String, first: String, ids: [String], data: [DashboardsInput]): DashboardsConnection
  favoriteDashboards(filter: String, sort: String, after: String, first: String, ids: [String], data: [DashboardsInput]): DashboardsConnection
  favoriteReports(filter: String, sort: String, after: String, first: String, ids: [String], data: [ReportsInput]): ReportsConnection
  reports(filter: String, sort: String, after: String, first: String, ids: [String], data: [ReportsInput]): ReportsConnection
  roles(filter: String, sort: String, after: String, first: String, ids: [String], data: [RolesInput]): RolesConnection
}

type UsersConnection {
  edges: [UsersEdge]
  pageInfo: PageInfo
}

type UsersEdge {
  node: Users
}

input UsersInput {
  id: ID
  createdOn: Date
  updatedOn: Date
  dashboards: [DashboardsInput]
  editingDashboards: [DashboardsInput]
  favoriteDashboards: [DashboardsInput]
  favoriteReports: [ReportsInput]
  reports: [ReportsInput]
  roles: [RolesInput]
}

type column {
  alias: String
  cid: String
  field: String
  parameters: [StringStringMap]
  type: ColumnarType
}

input columnInput {
  alias: String
  cid: String
  field: String
  parameters: [StringStringMapInput]
  type: ColumnarType
}

type dashboardFilter {
  type: ColumnarType
  dimension: String
  field: String
  operator: String
  values: [String]
}

input dashboardFilterInput {
  type: ColumnarType
  dimension: String
  field: String
  operator: String
  values: [String]
}

type dashboardPresentation {
  columns: Int
  layout: [layout]
  version: Int
}

input dashboardPresentationInput {
  columns: Int
  layout: [layoutInput]
  version: Int
}

type dashboardWidgetVisualization {
  metadata: [ObjectObjectMap]
  type: String
  version: Int
}

input dashboardWidgetVisualizationInput {
  metadata: [ObjectObjectMapInput]
  type: String
  version: Int
}

type deliveryFormat {
  type: DeliveryType
}

input deliveryFormatInput {
  type: DeliveryType
}

type elideAsyncQueryResult {
  completedOn: Date
  contentLength: Int
  httpStatus: Int
  recordCount: Int
  responseBody: String
}

input elideAsyncQueryResultInput {
  completedOn: Date
  contentLength: Int
  httpStatus: Int
  recordCount: Int
  responseBody: String
}

type elideTableExportResult {
  completedOn: Date
  httpStatus: Int
  message: String
  recordCount: Int
  url: URL
}

input elideTableExportResultInput {
  completedOn: Date
  httpStatus: Int
  message: String
  recordCount: Int
  url: URL
}

type filter {
  field: String
  operator: String
  parameters: [StringStringMap]
  type: ColumnarType
  values: [String]
}

input filterInput {
  field: String
  operator: String
  parameters: [StringStringMapInput]
  type: ColumnarType
  values: [String]
}

type layout {
  column: Int
  height: Int
  row: Int
  widgetId: Int
  width: Int
}

input layoutInput {
  column: Int
  height: Int
  row: Int
  widgetId: Int
  width: Int
}

type request {
  columns: [column]
  dataSource: String
  filters: [filter]
  limit: Int
  requestVersion: String
  rollup: rollup
  sorts: [sort]
  table: String
}

input requestInput {
  columns: [columnInput]
  dataSource: String
  filters: [filterInput]
  limit: Int
  requestVersion: String
  rollup: rollupInput
  sorts: [sortInput]
  table: String
}

type rollup {
  columnCids: [String]
  grandTotal: Boolean
}

input rollupInput {
  columnCids: [String]
  grandTotal: Boolean
}

type schedulingRules {
  mustHaveData: Boolean
}

input schedulingRulesInput {
  mustHaveData: Boolean
}

type sort {
  direction: String
  field: String
  parameters: [StringStringMap]
  type: ColumnarType
}

input sortInput {
  direction: String
  field: String
  parameters: [StringStringMapInput]
  type: ColumnarType
}

type visualization {
  metadata: [ObjectObjectMap]
  type: String
  version: Int
}

input visualizationInput {
  metadata: [ObjectObjectMapInput]
  type: String
  version: Int
}
